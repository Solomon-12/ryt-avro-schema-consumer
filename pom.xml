<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ytl</groupId>
	<artifactId>reward</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>reward</name>
	<description>Reward</description>
	<url/>
	<properties>
		<java.version>21</java.version>
		<spotless.version>2.43.0</spotless.version>
		<spring-cloud.version>2023.0.4</spring-cloud.version>
		<spring-cloud-alibaba.version>2023.0.1.2</spring-cloud-alibaba.version>
		<avro.version>1.11.4</avro.version>
		<kafka-avro-serializer.version>7.4.0</kafka-avro-serializer.version>
		<logstash.version>8.0</logstash.version>
		<spock.version>2.3-groovy-4.0</spock.version>
		<springdoc-openapi-starter.version>2.6.0</springdoc-openapi-starter.version>
		<commons-collections4.version>4.4</commons-collections4.version>
		<uuid-creator.version>6.0.0</uuid-creator.version>
		<gmavenplus-plugin.version>3.0.2</gmavenplus-plugin.version>
		<org.mapstruct.version>1.5.5.Final</org.mapstruct.version>
		<record-style-mapstruct-processor.version>1.0.0</record-style-mapstruct-processor.version>
		<spring-boot-starter-embedded-debezium-kafka-outbox.version>5.0.2
		</spring-boot-starter-embedded-debezium-kafka-outbox.version>
		<spring-cloud-aliyun.version>1.2.0</spring-cloud-aliyun.version>
		<groovy-json.version>3.0.22</groovy-json.version>
		<spock-reports.version>2.5.0-groovy-4.0</spock-reports.version>
		<image-builder>docker.io/paketobuildpacks/builder-jammy-base:latest</image-builder>
		<buildpack.ca-certificates.version>3</buildpack.ca-certificates.version>
		<buildpack.bellsoft-liberica.version>11</buildpack.bellsoft-liberica.version>
		<buildpack.syft.version>2</buildpack.syft.version>
		<buildpack.executable-jar.version>6</buildpack.executable-jar.version>
		<buildpack.spring-boot.version>5</buildpack.spring-boot.version>
		<buildpack.opentelemetry.version>2</buildpack.opentelemetry.version>
		<snapshots.update-policy>daily</snapshots.update-policy>
		<libphonenumber.version>8.13.46</libphonenumber.version>
		<testcontainers.version>1.20.4</testcontainers.version>
		<wiremock.version>3.6.0</wiremock.version>
		<opentelemetry.version>1.51.0</opentelemetry.version>
		<opentelemetry.instrumentation.version>2.16.0</opentelemetry.instrumentation.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-loadbalancer</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents.client5</groupId>
			<artifactId>httpclient5</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-avro-serializer</artifactId>
			<version>${kafka-avro-serializer.version}</version>
			<exclusions>
				<exclusion>
					<!-- Exclude swagger-annotations transitive dependency to prevent conflicts with springdoc-openapi -->
					<groupId>io.swagger.core.v3</groupId>
					<artifactId>swagger-annotations</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi-starter.version}</version>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-postgresql</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>${commons-collections4.version}</version>
		</dependency>

		<dependency>
			<groupId>com.github.f4b6a3</groupId>
			<artifactId>uuid-creator</artifactId>
			<version>${uuid-creator.version}</version>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>${avro.version}</version>
		</dependency>

		<dependency>
			<groupId>com.ytl</groupId>
			<artifactId>spring-cloud-aliyun-secrets-manager</artifactId>
			<version>${spring-cloud-aliyun.version}</version>
		</dependency>
		<dependency>
			<groupId>my.rytbank</groupId>
			<artifactId>spring-boot-starter-embedded-debezium-kafka-outbox</artifactId>
			<version>${spring-boot-starter-embedded-debezium-kafka-outbox.version}</version>
		</dependency>
		<dependency>
			<groupId>my.rytbank</groupId>
			<artifactId>embedded-debezium-tracing</artifactId>
			<version>${spring-boot-starter-embedded-debezium-kafka-outbox.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ytl</groupId>
			<artifactId>spring-cloud-aliyun-rabbitmq</artifactId>
			<version>${spring-cloud-aliyun.version}</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.libphonenumber</groupId>
			<artifactId>libphonenumber</artifactId>
			<version>${libphonenumber.version}</version>
		</dependency>

		<dependency>
			<groupId>com.ytl</groupId>
			<artifactId>spring-boot-starter-workflow-execution</artifactId>
			<version>0.0.2</version>
		</dependency>
		<dependency>
			<groupId>com.ytl</groupId>
			<artifactId>workflow-execution-spring-data-jpa</artifactId>
			<version>0.0.2</version>
		</dependency>

		<!-- Observability -->
		<dependency>
			<groupId>io.opentelemetry</groupId>
			<artifactId>opentelemetry-api</artifactId>
			<version>${opentelemetry.version}</version>
		</dependency>
		<dependency>
			<groupId>io.opentelemetry.instrumentation</groupId>
			<artifactId>opentelemetry-instrumentation-annotations</artifactId>
			<version>${opentelemetry.instrumentation.version}</version>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-otel</artifactId>
		</dependency>

		<dependency>
			<groupId>com.github.ben-manes.caffeine</groupId>
			<artifactId>caffeine</artifactId>
		</dependency>

		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>${logstash.version}</version>
		</dependency>

		<!-- Testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.spockframework</groupId>
			<artifactId>spock-core</artifactId>
			<version>${spock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.spockframework</groupId>
			<artifactId>spock-spring</artifactId>
			<version>${spock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-json</artifactId>
			<version>${groovy-json.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.athaydes</groupId>
			<artifactId>spock-reports</artifactId>
			<version>${spock-reports.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>spock</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>kafka</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>rabbitmq</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.wiremock.integrations</groupId>
			<artifactId>wiremock-spring-boot</artifactId>
			<version>${wiremock.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.alibaba.cloud</groupId>
				<artifactId>spring-cloud-alibaba-dependencies</artifactId>
				<version>${spring-cloud-alibaba.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-maven-plugin</artifactId>
				<version>${avro.version}</version>
				<executions>
					<execution>
						<id>customer-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/customer/v48</sourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>reward-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/reward/v6</sourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>deposit-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/deposit/v59</sourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>payment-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/payment/v65</sourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>credit-financing-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/credit-financing/v15</sourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>card-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/card/v49</sourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>assistant-engine-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/assistant-engine/v12</sourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>transaction-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/transaction/v37</sourceDirectory>
						</configuration>
					</execution>
					<execution>
						<id>martech-generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-protocol</goal>
						</goals>
						<configuration>
							<enableDecimalLogicalType>true</enableDecimalLogicalType>
							<sourceDirectory>${project.basedir}/schemas/martech/v14</sourceDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
